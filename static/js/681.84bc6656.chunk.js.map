{"version":3,"file":"static/js/681.84bc6656.chunk.js","mappings":"qKAWA,IARmB,SAAC,GAAY,IAAVA,EAAS,EAATA,GAEZC,EAAgB,QADLC,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KACqB,0BAA4BJ,EAAK,iRAAuD,8FACrH,OACI,uBAAIC,GAEX,C,gGCsCD,UAvCgB,WACZ,OAAqBI,EAAAA,EAAAA,MAAbC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KACZ,GAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQN,GAASF,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KAEFO,EAAsB,OAATP,EAAgB,SAAW,iCACxCQ,EAAoB,OAATR,EAAgB,OAAS,qBACpCS,EAAuB,OAATT,EAAgB,UAAY,iCAMhD,IAJAU,EAAAA,EAAAA,YAAU,WACNC,EAAAA,EAAAA,WAAqBT,EAAIC,GAAMS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IAAqBF,MAAK,SAAAG,GAAI,OAAIT,EAAWS,EAAKC,QAApB,GAC7E,GAAE,CAACd,EAAIC,EAAMH,KAETK,EAAS,OAAO,KAErB,IAAKA,EAAQY,OAAQ,OAAO,SAAC,IAAD,CAAYrB,IAAE,IAE1C,IAAMsB,EAAcb,EAAQc,KAAI,YAA0C,IAAvCjB,EAAsC,EAAtCA,GAAIkB,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC9CC,EAAO,IAAIC,KAAKF,GAAYG,qBAE5BC,EADiBL,EAAQM,MAAM,mBACER,KAAI,SAAAtB,GAAI,OAAI,uBAAIA,GAAR,IAE/C,OAAO,gBAAa+B,MAAO,CAAEC,MAAO,OAA7B,WAEH,yBAAItB,EAAJ,MAAiB,kBAAMuB,UAAU,aAAhB,cAA+BV,EAA/B,WAEjB,yBAAIZ,EAAJ,MAAe,kBAAMsB,UAAU,aAAhB,UAA8BP,EAA9B,WACf,yBAAId,EAAJ,MAAkB,kBAAMqB,UAAU,aAAhB,UAA8BJ,EAA9B,YALNxB,EAOnB,IAED,OACI,wBACKgB,GAGZ,C","sources":["components/PlugNoInfo.jsx","components/Reviews.jsx"],"sourcesContent":["import { LangContext } from \"./LangContextProvider/\";\nimport { useContext } from \"react\";\n\nconst PlugNoInfo = ({ uk }) => {\n    const { lang } = useContext(LangContext);\n    const text = lang === 'en' ? \"There is no information\" : uk ? \"Інформації немає українською мовою, спробуйте іншу\" : \"Інформації немає\";\n    return (\n        <p>{text}</p>\n    );\n}\n\nexport default PlugNoInfo;","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport apiMovies from \"tools/apiMovies\";\n\nimport { LangContext } from \"./LangContextProvider/\";\nimport { useContext } from \"react\";\nimport PlugNoInfo from \"./PlugNoInfo\";\n\nconst Reviews = () => {\n    const { id, type } = useParams();\n    const [reviews, setReviews] = useState(null);\n\n    const { lang } = useContext(LangContext);\n\n    const textAuthor = lang === 'en' ? \"Author\" : \"Автор\";\n    const textTime = lang === 'en' ? \"Time\" : \"Час\";\n    const textContent = lang === 'en' ? \"Content\" : \"Зміст\";\n\n    useEffect(() => {\n        apiMovies.getReviews(id, type).then(response => response.json()).then(data => setReviews(data.results));\n    }, [id, type, lang])\n\n    if (!reviews) return null;\n\n    if (!reviews.length) return <PlugNoInfo uk />;\n\n    const reviewsList = reviews.map(({ id, author, content, created_at }) => {\n        const time = new Date(created_at).toLocaleDateString()\n        const splitedContent = content.split(/\\r\\n|\\n\\r|\\n|\\r/);\n        const complitedContet = splitedContent.map(text => <p>{text}</p>);\n\n        return <li key={id} style={{ width: '80%' }}>\n\n            <p>{textAuthor}: <span className=\"secondText\"> {author} </span></p>\n\n            <p>{textTime}: <span className=\"secondText\">{time} </span></p>\n            <p>{textContent}: <span className=\"secondText\">{complitedContet} </span></p>\n        </li>\n    })\n\n    return (\n        <ul>\n            {reviewsList}\n        </ul>\n    );\n}\n\nexport default Reviews;"],"names":["uk","text","useContext","LangContext","lang","useParams","id","type","useState","reviews","setReviews","textAuthor","textTime","textContent","useEffect","apiMovies","then","response","json","data","results","length","reviewsList","map","author","content","created_at","time","Date","toLocaleDateString","complitedContet","split","style","width","className"],"sourceRoot":""}